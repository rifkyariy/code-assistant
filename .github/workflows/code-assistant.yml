name: 'üßê Gemini AI Assistant'

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
      - 'test/shitty-code'

permissions:
  contents: write
  pull-requests: write

jobs:
  #=================================================
  # JOB 1: Summarize commit changes on push to main
  #=================================================
  summarize-push:
    name: 'Summarize Push to Main'
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: 'Set up Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: 'Get commit changes'
        id: get-diff
        run: |
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          git diff HEAD~1 HEAD >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: 'Generate summary with Gemini'
        id: gemini-summary
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          COMMIT_DIFF: ${{ steps.get-diff.outputs.diff }}
        run: |
          PROMPT="You are an expert programmer. Summarize the following code changes in a few clear, concise bullet points."
          SUMMARY=$(echo "${COMMIT_DIFF}" | npx @google/gemini-cli --prompt "${PROMPT}")
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "${SUMMARY}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: 'Post summary as a commit comment'
        uses: actions/github-script@v7
        env:
          SUMMARY_BODY: ${{ steps.gemini-summary.outputs.summary }}
        with:
          script: |
            const body = `### ü§ñ Gemini Summary of Changes\n\n${process.env.SUMMARY_BODY}`;
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: body
            });
      - name: 'Post Failure Comment on Commit'
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `‚ùå **Gemini Summary Failed!**\n\nAn error occurred while generating the summary. Please check the [Actions Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`
            });

  #===================================================
  # JOB 2: Review a pull request (UPGRADED)
  #===================================================
  review-pr:
    name: 'Review Pull Request'
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: 'Set up Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: 'Get PR diff'
        id: get-pr-diff
        run: |
          gh pr diff ${{ github.event.pull_request.number }} > pr.diff
          echo "diff_path=pr.diff" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # ==> THIS STEP IS CORRECTED <==
      - name: 'Generate review with Gemini'
        id: gemini-review
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Use a "here document" (cat <<'EOF') for safe multi-line string assignment.
          PROMPT=$(cat <<'EOF'
          You are an expert code reviewer. Analyze the following code changes from the git diff.
          Your task is to provide a review by generating a single JSON object. Do not output any text before or after the JSON object.
          The JSON object must have two top-level keys: "summary" and "comments".
          1. The "summary" value should be a brief, high-level overview of your findings (2-3 sentences).
          2. The "comments" value must be an array of comment objects.
          3. Each comment object in the array must have three keys: "file_path" (string), "line_number" (integer), and "comment_body" (string).
          4. For each specific suggestion you have, create one comment object. Ensure line numbers are accurate based on the diff.
          5. If you have no suggestions, return an empty "comments" array.

          Here is the required JSON format:
          {
            "summary": "Your high-level summary here.",
            "comments": [
              {
                "file_path": "path/to/file.js",
                "line_number": 42,
                "comment_body": "Your specific suggestion for this line."
              }
            ]
          }
          EOF
          )
          
          GEMINI_OUTPUT=$(cat ${{ steps.get-pr-diff.outputs.diff_path }} | npx @google/gemini-cli --prompt "${PROMPT}")
            
          echo "review_json<<EOF" >> $GITHUB_OUTPUT
          echo "${GEMINI_OUTPUT}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: 'Post review with inline comments'
        uses: actions/github-script@v7
        env:
          GEMINI_JSON_STRING: ${{ steps.gemini-review.outputs.review_json }}
        with:
          script: |
            const rawOutput = process.env.GEMINI_JSON_STRING;
            const jsonStart = rawOutput.indexOf('{');
            const jsonEnd = rawOutput.lastIndexOf('}') + 1;
            const jsonString = rawOutput.substring(jsonStart, jsonEnd);
            const reviewData = JSON.parse(jsonString);
            
            const summary = reviewData.summary || "Gemini review complete.";
            const comments = reviewData.comments || [];
            
            if (comments.length > 0 || summary) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                event: 'COMMENT',
                body: `### üßê Gemini Code Review\n\n${summary}`,
                comments: comments.map(c => ({
                  path: c.file_path,
                  line: c.line_number,
                  body: c.comment_body,
                })),
              });
            }

      - name: 'Post Failure Comment on PR'
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚ùå **Gemini Review Failed!**\n\nAn error occurred during the code review. Please check the [Actions Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`
            });