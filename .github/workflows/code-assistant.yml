name: 'Code Assistant: Code Review and Summary'

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
      - 'test/shitty-code'

permissions:
  contents: write
  pull-requests: write

jobs:
  #=================================================
  # JOB 1: Summarize commit changes on push to main
  #=================================================
  summarize-push:
    name: 'Summarize Push to Main'
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: 'Set up Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: 'Get commit changes'
        id: get-diff
        run: |
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          git diff HEAD~1 HEAD >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: 'Generate summary with Gemini'
        id: gemini-summary
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          COMMIT_DIFF: ${{ steps.get-diff.outputs.diff }}
        run: |
          PROMPT="You are an expert programmer. Summarize the following code changes in a few clear, concise bullet points."
          SUMMARY=$(echo "${COMMIT_DIFF}" | npx @google/gemini-cli --prompt "${PROMPT}")
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "${SUMMARY}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: 'Post summary as a commit comment'
        uses: actions/github-script@v7
        env:
          SUMMARY_BODY: ${{ steps.gemini-summary.outputs.summary }}
        with:
          script: |
            const body = `### ü§ñ Gemini Summary of Changes\n\n${process.env.SUMMARY_BODY}`;
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: body
            });
      - name: 'Post Failure Comment on Commit'
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `‚ùå **Gemini Summary Failed!**\n\nAn error occurred while generating the summary. Please check the [Actions Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`
            });
  #===================================================
  # JOB 2: Review a pull request (UPGRADED)
  #===================================================
  review-pr:
    name: 'Review Pull Request'
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Set up Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 'Get PR diff'
        id: get-pr-diff
        run: |
          gh pr diff ${{ github.event.pull_request.number }} > pr.diff
          echo "diff_path=pr.diff" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 'Generate review with Gemini'
        id: gemini-review
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          PROMPT=$(cat <<'EOF'
          You are an expert code reviewer. Your task is to provide a review by generating a single JSON object.

          **CRITICAL CONSTRAINTS:**
          1.  For every comment you generate, the "comment_body" MUST be directly and strictly relevant to the code at the specified "file_path" and "line_number".
          2.  Before creating a comment object, you MUST verify that the line number you've chosen is accurate based on the provided git diff.
          3.  DO NOT invent problems. If the code change is simple and correct (e.g., fixing a typo or changing a CSS value), return an empty "comments" array.
          4.  You MUST output only a single, valid JSON object and nothing else.

          **JSON FORMAT:**
          The JSON object must have two top-level keys: "summary" and "comments".
          - "summary": A brief, high-level overview of your findings.
          - "comments": An array of comment objects. Each object must have three keys: "file_path", "line_number", and "comment_body".

          **EXAMPLE JSON:**
          {
            "summary": "The changes look mostly good, but I have one suggestion for improving clarity.",
            "comments": [
              {
                "file_path": "src/app.js",
                "line_number": 42,
                "comment_body": "This variable could be renamed for better readability."
              }
            ]
          }
          EOF
          )
          
          GEMINI_OUTPUT=$(cat ${{ steps.get-pr-diff.outputs.diff_path }} | npx @google/gemini-cli \
            --model "gemini-1.5-pro" \
            --prompt "${PROMPT}")
            
          echo "review_json<<EOF" >> $GITHUB_OUTPUT
          echo "${GEMINI_OUTPUT}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: 'Post review with inline comments'
        uses: actions/github-script@v7
        env:
          GEMINI_JSON_STRING: ${{ steps.gemini-review.outputs.review_json }}
        with:
          script: |
            const rawOutput = process.env.GEMINI_JSON_STRING;
            
            // 1. Check if the output is empty or null.
            if (!rawOutput) {
              console.log("Gemini returned no output. Skipping review.");
              return;
            }

            let reviewData;
            
            // 2. Use a try-catch block to safely parse the JSON.
            try {
              const jsonStart = rawOutput.indexOf('{');
              const jsonEnd = rawOutput.lastIndexOf('}') + 1;
              
              if (jsonStart === -1 || jsonEnd === 0) {
                  throw new Error("No JSON object found in the output.");
              }
              
              const jsonString = rawOutput.substring(jsonStart, jsonEnd);
              reviewData = JSON.parse(jsonString);
            } catch (error) {
              console.error("Failed to parse JSON from Gemini output.", error);
              console.log("Raw output was:", rawOutput);
              // Optionally, post a comment indicating the failure to parse
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚ö†Ô∏è **Gemini Review Warning**\n\nThe AI reviewer did not return a valid JSON response and a review could not be created. Please check the Actions logs for details.`
              });
              return; // Exit the script gracefully
            }
            
            const summary = reviewData.summary || "Gemini review complete.";
            const comments = reviewData.comments || [];
            
            // 3. Only post if there's something to say.
            if (comments.length > 0 || reviewData.summary) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                event: 'COMMENT',
                body: `### üßê Gemini Code Review\n\n${summary}`,
                comments: comments.map(c => ({
                  path: c.file_path,
                  line: c.line_number,
                  body: c.comment_body,
                })),
              });
            }

      - name: 'Post Failure Comment on PR'
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚ùå **Gemini Review Failed!**\n\nAn error occurred during the code review. Please check the [Actions Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`
            });