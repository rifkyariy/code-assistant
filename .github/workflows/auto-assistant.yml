name: AI Code Review with Gemini

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  ai-code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            **/*.js
            **/*.ts
            **/*.jsx
            **/*.tsx
            **/*.py
            **/*.java
            **/*.go
            **/*.rs
            **/*.cpp
            **/*.c
            **/*.cs
            **/*.php
            **/*.rb
            **/*.swift
            **/*.kt

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm init -y
          npm install axios

      - name: Create review script
        run: |
          cat > review.js << 'EOF'
          const axios = require('axios');
          const fs = require('fs');

          async function reviewCode() {
            const apiKey = process.env.GEMINI_API_KEY;
            const changedFiles = process.env.CHANGED_FILES.split(' ').filter(f => f.trim());
            const prNumber = process.env.PR_NUMBER;
            const repoName = process.env.GITHUB_REPOSITORY;
            const githubToken = process.env.GITHUB_TOKEN;

            if (changedFiles.length === 0) {
              console.log('No relevant files changed');
              return;
            }

            console.log('Reviewing files:', changedFiles);

            let allReviews = [];

            for (const file of changedFiles) {
              try {
                if (!fs.existsSync(file)) {
                  console.log(`File ${file} does not exist, skipping...`);
                  continue;
                }

                const content = fs.readFileSync(file, 'utf8');
                
                // Skip very large files
                if (content.length > 10000) {
                  console.log(`File ${file} is too large, skipping...`);
                  continue;
                }

                const prompt = `Please review this code file and provide constructive feedback. Focus on:
          1. Code quality and best practices
          2. Potential bugs or security issues
          3. Performance improvements
          4. Readability and maintainability
          5. Suggestions for improvement

          File: ${file}

          Code:
          \`\`\`
          ${content}
          \`\`\`

          Please provide a concise review with specific suggestions. If the code is good, mention what's done well.`;

                const response = await axios.post(
                  `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`,
                  {
                    contents: [{
                      parts: [{
                        text: prompt
                      }]
                    }]
                  },
                  {
                    headers: {
                      'Content-Type': 'application/json'
                    }
                  }
                );

                const review = response.data.candidates[0].content.parts[0].text;
                allReviews.push({
                  file: file,
                  review: review
                });

                // Add delay to respect rate limits
                await new Promise(resolve => setTimeout(resolve, 1000));

              } catch (error) {
                console.error(`Error reviewing ${file}:`, error.message);
                allReviews.push({
                  file: file,
                  review: `Error reviewing this file: ${error.message}`
                });
              }
            }

            // Create PR comment
            let commentBody = "## ü§ñ AI Code Review (Powered by Gemini)\n\n";
            
            if (allReviews.length === 0) {
              commentBody += "No files were reviewed.";
            } else {
              allReviews.forEach(({file, review}) => {
                commentBody += `### üìÅ \`${file}\`\n\n${review}\n\n---\n\n`;
              });
              
              commentBody += "\n*This review was generated by AI. Please use it as a starting point for your own review.*";
            }

            // Post comment to PR
            try {
              await axios.post(
                `https://api.github.com/repos/${repoName}/issues/${prNumber}/comments`,
                {
                  body: commentBody
                },
                {
                  headers: {
                    'Authorization': `token ${githubToken}`,
                    'Accept': 'application/vnd.github.v3+json'
                  }
                }
              );
              console.log('Review posted successfully');
            } catch (error) {
              console.error('Error posting comment:', error.response?.data || error.message);
            }
          }

          reviewCode().catch(console.error);
          EOF

      - name: Run AI Code Review
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: node review.js